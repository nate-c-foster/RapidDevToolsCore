{
  "custom": {},
  "params": {},
  "permissions": {
    "securityLevels": [
      {
        "children": [],
        "name": "Authenticated"
      }
    ],
    "type": "AllOf"
  },
  "props": {
    "defaultSize": {
      "height": 1167,
      "width": 1038
    }
  },
  "root": {
    "children": [
      {
        "children": [
          {
            "children": [
              {
                "meta": {
                  "name": "SelectProject"
                },
                "position": {
                  "basis": "320px"
                },
                "propConfig": {
                  "props.params.options": {
                    "binding": {
                      "config": {
                        "expression": "now(0)"
                      },
                      "transforms": [
                        {
                          "code": "\tprojectNames \u003d backup.util.getProjectNames()\n\t\n\treturn [{\u0027label\u0027:name, \u0027value\u0027:name} for name in projectNames]",
                          "type": "script"
                        }
                      ],
                      "type": "expr"
                    }
                  }
                },
                "props": {
                  "params": {
                    "label": "Project",
                    "value": ""
                  },
                  "path": "Global Components/Forms/Label Dropdown Item",
                  "style": {
                    "height": "40px",
                    "margin": "auto 20px"
                  }
                },
                "type": "ia.display.view"
              }
            ],
            "meta": {
              "name": "Header"
            },
            "position": {
              "basis": "100px",
              "shrink": 0
            },
            "type": "ia.container.flex"
          },
          {
            "children": [
              {
                "events": {
                  "component": {
                    "onActionPerformed": {
                      "config": {
                        "script": "\t\n\timport os\n\t\n\tdateTime \u003d system.date.format(system.date.now(),\"yyyy-MM-dd-HHmmss\")\t\n\tbackupTypes \u003d self.parent.parent.getChild(\"OptionsContainer\").getChild(\"FlexRepeater\").props.instances\n\tinstallationPath \u003d settings.getValue(\u0027Global\u0027, \u0027installationPathIA\u0027)\n\ttempSaveLocation \u003d settings.getValue(\u0027Global\u0027, \u0027serverTempSaveLocation\u0027)\n\t\n\tif not os.path.exists(tempSaveLocation):\n\t\tos.makedirs(tempSaveLocation)\n\t\n\tfor backupType in backupTypes: \n\t\t\n\t\t# ------------ Tags -------------------------------------------\t\t\n\t\tif backupType[\u0027type\u0027] \u003d\u003d \u0027Tags\u0027:\n\t\t\n\t\t\toptions \u003d backupType[\u0027options\u0027]\n\t\t\n\t\t\tfor option in options:\n\t\t\t\tif option[\u0027value\u0027]:\n\t\t\t\t\ttagProvider \u003d option[\u0027label\u0027].split(\u0027]\u0027)[0][1:]\n\t\t\t\t\ttagLabel \u003d option[\u0027label\u0027][len(tagProvider)+2:].replace(\u0027/\u0027,\u0027-\u0027)\n\t\t\t\t\tfileName \u003d \"TagExport_\" + tagProvider + \u0027__\u0027 + tagLabel + \u0027_\u0027 + dateTime +  \".json\"\n\t\t\t\t\tbackup.util.exportTags(fileName, option[\u0027label\u0027])\n\t\t\t\t\tbackup.util.downloadTempFile(fileName)\n\t\t\n\t\t\n\t\t\n\t\t# ------------ Database Tables -------------------------------------------\t\t\n\t\tif backupType[\u0027type\u0027] \u003d\u003d \u0027Database Tables\u0027:\n\t\t\n\t\t\t\n\t\t\toptions \u003d backupType[\u0027options\u0027]\n\t\t\t\n\t\t\tfor option in options:\n\t\t\t\tif option[\u0027value\u0027]:\n\t\t\t\t\ttableName \u003d option[\u0027label\u0027]\n\t\t\t\n\t\t\t\t\tfileName \u003d \"TableExport_\" + tableName + \"_\" + dateTime +  \".csv\"\n\t\t\t\t\t\n\t\t\t\t\tdatabaseTables \u003d system.tag.readBlocking(self.session.custom.tagProvider + \"RapidDev/Backup Restore/Settings/databaseTables\")[0].value\n\t\t\t\t\tfor row in range(databaseTables.getRowCount()):\n\t\t\t\t\t\tif tableName \u003d\u003d databaseTables.getValueAt(row,\u0027Table\u0027):\n\t\t\t\t\t\t\tdbName \u003d databaseTables.getValueAt(row,\u0027Database\u0027)\n\t\t\t\t\t\t\tdbType \u003d databaseTables.getValueAt(row,\u0027Translator\u0027)\n\t\t\t\t\t\n\t\t\t\t\t\t\tdbeditor.util.exportDBtable(dbType, dbName, tableName, fileName)\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t# ------------ Themes --------------------------------------------------------\n\t\tif backupType[\u0027type\u0027] \u003d\u003d \u0027Themes\u0027:\t\t\n\t\t\ttempDirectory \u003d \u0027Themes_Backup_\u0027 + dateTime\n\t\t\tthemesPath \u003d installationPath + \u0027/Ignition/data/modules/com.inductiveautomation.perspective/themes\u0027\n\t\t\toptions \u003d backupType[\u0027options\u0027]\n\t\t\tempty \u003d True\n\t\t\tfor option in options:\n\t\t\t\tif option[\u0027value\u0027]:\n\t\t\t\t\tbackup.util.copyToTempDirectory(themesPath + \u0027/\u0027 + option[\u0027label\u0027], tempDirectory + \u0027/\u0027 + option[\u0027label\u0027])\n\t\t\t\t\tempty \u003d False\n\t\t\t\t\n\t\t\tif not empty:\n\t\t\t\tbackup.util.zipTempDirectory(tempDirectory)\n\t\t\t\tbackup.util.downloadTempFile(tempDirectory + \u0027.zip\u0027)\n\t\t\n\t\t\n\t\t\n\t\t# ------------ Icons --------------------------------------------------------\n\t\tif backupType[\u0027type\u0027] \u003d\u003d \u0027Icons\u0027:\t\t\n\t\t\ttempDirectory \u003d \u0027Icons_Backup_\u0027 + dateTime\n\t\t\ticonsPath \u003d installationPath + \u0027/Ignition/data/modules/com.inductiveautomation.perspective/icons\u0027\n\t\t\toptions \u003d backupType[\u0027options\u0027]\n\t\t\tempty \u003d True\n\t\t\tfor option in options:\n\t\t\t\tif option[\u0027value\u0027]:\n\t\t\t\t\n\t\t\t\t\tif not os.path.exists(tempSaveLocation + \u0027/\u0027 + tempDirectory):\n\t\t\t\t\t\tos.makedirs(tempSaveLocation + \u0027/\u0027 + tempDirectory)\n\t\t\t\t\tbackup.util.copyToTempDirectory(iconsPath + \u0027/\u0027 + option[\u0027label\u0027] + \u0027.svg\u0027, tempDirectory + \u0027/\u0027 + option[\u0027label\u0027] + \u0027.svg\u0027)\n\t\t\t\t\tempty \u003d False\n\t\t\t\t\n\t\t\tif not empty:\n\t\t\t\tbackup.util.zipTempDirectory(tempDirectory)\n\t\t\t\tbackup.util.downloadTempFile(tempDirectory + \u0027.zip\u0027)\n\t\t\n\t\t\n\t\t\n\t\t"
                      },
                      "scope": "G",
                      "type": "script"
                    }
                  }
                },
                "meta": {
                  "name": "Download",
                  "tooltip": {
                    "enabled": true,
                    "text": "Download the selected resources."
                  }
                },
                "position": {
                  "basis": "125px",
                  "shrink": 0
                },
                "props": {
                  "style": {
                    "marginRight": "10px"
                  },
                  "text": "Download"
                },
                "type": "ia.input.button"
              },
              {
                "events": {
                  "component": {
                    "onActionPerformed": {
                      "config": {
                        "script": "\t\n\timport os\n\t\n\tdateTime \u003d system.date.format(system.date.now(),\"yyyy-MM-dd-HHmmss\")\t\n\tbackupTypes \u003d self.parent.parent.getChild(\"OptionsContainer\").getChild(\"FlexRepeater\").props.instances\n\tprojectName \u003d self.parent.parent.getChild(\"Header\").getChild(\"SelectProject\").props.params.value\n\ttempSaveLocation \u003d settings.getValue(\u0027Global\u0027, \u0027serverTempSaveLocation\u0027)\n\t\n\tfor backupType in backupTypes: \n\t\t\n\t\t# ------------ Tags -------------------------------------------\t\t\n\t\tif backupType[\u0027type\u0027] \u003d\u003d \u0027Tags\u0027:\n\t\t\n\t\t\toptions \u003d backupType[\u0027options\u0027]\n\t\t\n\t\t\tfor option in options:\n\t\t\t\tif option[\u0027value\u0027]:\n\t\t\t\t\ttagProvider \u003d option[\u0027label\u0027].split(\u0027]\u0027)[0][1:]\n\t\t\t\t\ttagLabel \u003d option[\u0027label\u0027][len(tagProvider)+2:].replace(\u0027/\u0027,\u0027-\u0027)\n\t\t\t\t\tfileName \u003d \"TagExport_\" + tagLabel + \u0027_\u0027 + dateTime +  \".json\"\n\t\t\t\t\tbackup.util.exportTags(fileName, option[\u0027label\u0027])\n\t\t\t\t\tbackup.util.copyFileToProject(fileName, \u0027tags/\u0027 + tagProvider + \u0027__\u0027 + tagLabel + \u0027.json\u0027, projectName)\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t# ------------ Database Tables -------------------------------------------\t\t\n\t\tif backupType[\u0027type\u0027] \u003d\u003d \u0027Database Tables\u0027:\n\t\t\n\t\t\t\n\t\t\toptions \u003d backupType[\u0027options\u0027]\n\t\t\t\n\t\t\tfor option in options:\n\t\t\t\tif option[\u0027value\u0027]:\n\t\t\t\t\ttableName \u003d option[\u0027label\u0027]\n\t\t\t\t\t\n\t\t\t\n\t\t\t\t\tfileName \u003d \"TableExport_\" + tableName + \"_\" + dateTime +  \".csv\"\n\t\t\t\t\t\n\t\t\t\t\tdatabaseTables \u003d system.tag.readBlocking(self.session.custom.tagProvider + \"RapidDev/Backup Restore/Settings/databaseTables\")[0].value\n\t\t\t\t\tfor row in range(databaseTables.getRowCount()):\n\t\t\t\t\t\tif tableName \u003d\u003d databaseTables.getValueAt(row,\u0027Table\u0027):\n\t\t\t\t\t\t\tdbName \u003d databaseTables.getValueAt(row,\u0027Database\u0027)\n\t\t\t\t\t\t\tdbType \u003d databaseTables.getValueAt(row,\u0027Translator\u0027)\n\t\t\t\t\t\n\t\t\t\t\t\t\tdbeditor.util.exportDBtable(dbType, dbName, tableName, fileName, download\u003dFalse)\n\t\t\t\t\t\t\tbackup.util.copyFileToProject(fileName, \u0027tables/\u0027 + dbName + \u0027__\u0027 + tableName + \u0027.csv\u0027, projectName)\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t# ------------ Themes --------------------------------------------------------\n\t\tif backupType[\u0027type\u0027] \u003d\u003d \u0027Themes\u0027:\t\t\n\t\t\ttempDirectory \u003d \u0027Themes_Backup_\u0027 + dateTime\n\t\t\tinstallationPath \u003d settings.getValue(\u0027Global\u0027, \u0027installationPathIA\u0027)\n\t\t\tthemesPath \u003d installationPath + \u0027/Ignition/data/modules/com.inductiveautomation.perspective/themes\u0027\n\t\t\toptions \u003d backupType[\u0027options\u0027]\n\t\t\tempty \u003d True\n\t\t\tfor option in options:\n\t\t\t\tif option[\u0027value\u0027]:\n\t\t\t\t\tbackup.util.copyToTempDirectory(themesPath + \u0027/\u0027 + option[\u0027label\u0027], tempDirectory + \u0027/\u0027 + option[\u0027label\u0027])\n\t\t\t\t\tempty \u003d False\n\t\t\t\n\t\t\tif not empty:\t\t\n\t\t\t\tbackup.util.copyFolderToProject(tempDirectory, \u0027themes\u0027, projectName)\n\n\t\t\n\t\t\n\t\t\n\t\t# ------------ Icons --------------------------------------------------------\t\t\t\t\n\t\tif backupType[\u0027type\u0027] \u003d\u003d \u0027Icons\u0027:\t\t\n\t\t\ttempDirectory \u003d \u0027Icons_Backup_\u0027 + dateTime\n\t\t\ticonsPath \u003d installationPath + \u0027/Ignition/data/modules/com.inductiveautomation.perspective/icons\u0027\n\t\t\toptions \u003d backupType[\u0027options\u0027]\n\t\t\tempty \u003d True\n\t\t\tfor option in options:\n\t\t\t\tif option[\u0027value\u0027]:\n\t\t\t\t\tif not os.path.exists(tempSaveLocation + \u0027/\u0027 + tempDirectory):\n\t\t\t\t\t\tos.makedirs(tempSaveLocation + \u0027/\u0027 + tempDirectory)\n\t\t\t\t\tbackup.util.copyToTempDirectory(iconsPath + \u0027/\u0027 + option[\u0027label\u0027] + \u0027.svg\u0027, tempDirectory + \u0027/\u0027 + option[\u0027label\u0027] + \u0027.svg\u0027)\n\t\t\t\t\tempty \u003d False\n\t\t\t\t\n\t\t\tif not empty:\n\t\t\t\tbackup.util.copyFolderToProject(tempDirectory, \u0027icons\u0027, projectName)\n\t\t\n\t\t\n\t\t"
                      },
                      "scope": "G",
                      "type": "script"
                    }
                  }
                },
                "meta": {
                  "name": "Add",
                  "tooltip": {
                    "enabled": true,
                    "text": "Add the selected resources to the project folder."
                  }
                },
                "position": {
                  "basis": "125px",
                  "shrink": 0
                },
                "propConfig": {
                  "props.enabled": {
                    "binding": {
                      "config": {
                        "path": ".../Header/SelectProject.props.params.value"
                      },
                      "transforms": [
                        {
                          "code": "\tif value:\n\t\treturn True\n\telse:\n\t\treturn False",
                          "type": "script"
                        }
                      ],
                      "type": "property"
                    }
                  }
                },
                "props": {
                  "style": {
                    "marginRight": "10px"
                  },
                  "text": "Add to Project"
                },
                "type": "ia.input.button"
              }
            ],
            "meta": {
              "name": "ButtonContainer"
            },
            "position": {
              "basis": "40px"
            },
            "props": {
              "style": {
                "margin": "0px 20px"
              }
            },
            "type": "ia.container.flex"
          },
          {
            "children": [
              {
                "meta": {
                  "name": "FlexRepeater"
                },
                "position": {
                  "grow": 1
                },
                "propConfig": {
                  "props.instances": {
                    "binding": {
                      "config": {
                        "struct": {},
                        "waitOnAll": true
                      },
                      "transforms": [
                        {
                          "code": "\t\n\tinstances \u003d []\n\t\n\ttagProvider \u003d self.session.custom.tagProvider\n\t\n\tdefaultValue \u003d False\n\t\n\t# ----------------  Update with all project names ----------------------\n#\tprojectNames \u003d backup.util.getProjectNames()\n#\tprojectOptions \u003d []\n#\tfor name in projectNames:\n#\t\tprojectOptions.append({\u0027label\u0027:name, \u0027value\u0027:True, \u0027viewPath\u0027:\u0027Backup Restore/Components/Checkbox Option\u0027})\n#\t\t\n#\t\t\n#\tself.props.instances[1].options \u003d projectOptions\t\n\n\n\t# ----------------  Update with all root tag paths ----------------------\n\t#tagProviders \u003d backup.util.getTagProviders()\n\trootTagPaths \u003d system.tag.readBlocking(tagProvider + \"RapidDev/Backup Restore/Settings/rootTagPaths\")[0].value\n\n\ttagPathOptions \u003d []\n\tfor tagPath in rootTagPaths:\n\t\n\t\ttagPathOptions.append({\u0027label\u0027:tagPath, \u0027value\u0027:defaultValue, \u0027viewPath\u0027:\u0027Backup Restore/Components/Checkbox Option\u0027})\n\t\n\tinstances.append({\u0027type\u0027: \u0027Tags\u0027, \u0027options\u0027: tagPathOptions})\n\t\t\n\n\t\n\t\n\t# ----------------  Update with database tables  ----------------------\n\t\n\tdatabaseTables \u003d system.tag.readBlocking(self.session.custom.tagProvider + \"RapidDev/Backup Restore/Settings/databaseTables\")[0].value\n\t\n\ttableOptions \u003d []\n\tfor row in range(databaseTables.getRowCount()):\n\t\tdatabase \u003d databaseTables.getValueAt(row,\u0027Database\u0027)\n\t\ttranslator \u003d databaseTables.getValueAt(row,\u0027Translator\u0027)\n\t\ttable \u003d databaseTables.getValueAt(row,\u0027Table\u0027)\n\t\ttableOptions.append({\u0027label\u0027:table, \u0027value\u0027:defaultValue, \u0027viewPath\u0027:\u0027Backup Restore/Components/Checkbox Option\u0027})\n\t\t\n\tinstances.append({\u0027type\u0027: \u0027Database Tables\u0027, \u0027options\u0027: tableOptions})\n\t\n\t# ----------------  Update with all icons ----------------------\t\n#\tthemeNames \u003d backup.util.getThemeNames()\n\n\tthemes \u003d system.tag.readBlocking(self.session.custom.tagProvider + \"RapidDev/Backup Restore/Settings/themes\")[0].value\n\n\tthemeOptions \u003d []\n\tfor theme in themes:\n\t\tthemeOptions.append({\u0027label\u0027:theme, \u0027value\u0027:defaultValue, \u0027viewPath\u0027:\u0027Backup Restore/Components/Checkbox Option\u0027})\n\t\t\n\tinstances.append({\u0027type\u0027: \u0027Themes\u0027, \u0027options\u0027: themeOptions})\n\t\n\t# ----------------  Update with all icons ----------------------\t\n\n\ticons \u003d system.tag.readBlocking(self.session.custom.tagProvider + \"RapidDev/Backup Restore/Settings/icons\")[0].value\n\n\ticonOptions \u003d []\n\tfor icon in icons:\n\t\ticonOptions.append({\u0027label\u0027:icon, \u0027value\u0027:defaultValue, \u0027viewPath\u0027:\u0027Backup Restore/Components/Checkbox Option\u0027})\n\t\t\n\tinstances.append({\u0027type\u0027: \u0027Icons\u0027, \u0027options\u0027: iconOptions})\n\n\n\n\n\treturn instances",
                          "type": "script"
                        }
                      ],
                      "type": "expr-struct"
                    }
                  }
                },
                "props": {
                  "direction": "column",
                  "elementPosition": {
                    "basis": "auto",
                    "grow": 0,
                    "shrink": 0
                  },
                  "elementStyle": {
                    "marginTop": "10px"
                  },
                  "path": "Backup Restore/Components/Backup Type",
                  "style": {
                    "overflow": "visible"
                  },
                  "useDefaultViewHeight": false,
                  "useDefaultViewWidth": false
                },
                "type": "ia.display.flex-repeater"
              }
            ],
            "meta": {
              "name": "OptionsContainer"
            },
            "position": {
              "basis": "495px",
              "grow": 1
            },
            "props": {
              "direction": "column",
              "style": {
                "margin": "20px"
              }
            },
            "scripts": {
              "customMethods": [],
              "extensionFunctions": null,
              "messageHandlers": [
                {
                  "messageType": "UpdateBackupOptions",
                  "pageScope": true,
                  "script": "\t# implement your handler here\n\t\n\n\t# values won\u0027t update without converting to Python Object\n\tinstances \u003d util.json.toPythonObject(self.getChild(\"FlexRepeater\").props.instances)\n\n\t\n\tfor i, instance in enumerate(instances):\n\t\tif instance[\u0027type\u0027] \u003d\u003d payload[\u0027type\u0027]:\n\t\t\tfor j, option in enumerate(instance[\u0027options\u0027]):\n\t\t\t\tif option[\u0027label\u0027] \u003d\u003d payload[\u0027label\u0027]:\n\t\t\t\t\tinstances[i][\u0027options\u0027][j][\u0027value\u0027] \u003d payload[\u0027value\u0027]\n\n\t\t\t\t\t\n\t\t\t\t\t\n\tself.getChild(\"FlexRepeater\").props.instances \u003d instances\n",
                  "sessionScope": false,
                  "viewScope": false
                }
              ]
            },
            "type": "ia.container.flex"
          }
        ],
        "meta": {
          "name": "Backup"
        },
        "props": {
          "direction": "column",
          "style": {
            "overflow": "visible"
          }
        },
        "type": "ia.container.flex"
      },
      {
        "meta": {
          "name": "KPI Editor"
        },
        "position": {
          "tabIndex": 1
        },
        "props": {
          "style": {
            "color": "var(--neutral-70)",
            "fontSize": "20px",
            "textAlign": "center"
          },
          "text": "Coming Soon!"
        },
        "type": "ia.display.label"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "menuType": "modern",
      "style": {
        "padding": "20px"
      },
      "tabSize": {
        "width": 250
      },
      "tabStyle": {
        "active": {
          "color": ""
        },
        "inactive": {
          "fontSize": ""
        }
      },
      "tabs": [
        "Backup",
        "Restore"
      ]
    },
    "type": "ia.container.tab"
  }
}